=============================================================================
INSTRUCCIONES PARA PROBAR FASE 9 - PERSISTENCIA Y OPTIMIZACIÓN
=============================================================================

IMPORTANTE: NO HACER COMMIT HASTA QUE HAYAS PROBADO TODO Y FUNCIONE

=============================================================================
ARCHIVOS A COPIAR A TU PROYECTO NINJATRADER
=============================================================================

NUEVOS ARCHIVOS (Copiar a tu proyecto):
---------------------------------------

1. src/Core/PersistenceManager.cs (367 líneas)
   → Copiar a: [TuProyecto]/Indicators/PinkButterfly/Core/

2. src/Core/EngineStats.cs (239 líneas)
   → Copiar a: [TuProyecto]/Indicators/PinkButterfly/Core/

3. src/Core/Diagnostics.cs (318 líneas)
   → Copiar a: [TuProyecto]/Indicators/PinkButterfly/Core/

4. src/Testing/Fase9Tests.cs (820 líneas)
   → Copiar a: [TuProyecto]/Indicators/PinkButterfly/Testing/


ARCHIVOS MODIFICADOS (Reemplazar en tu proyecto):
-------------------------------------------------

5. src/Core/EngineConfig.cs
   → Añadidos 16 parámetros nuevos (persistencia y purga)
   → Reemplazar en: [TuProyecto]/Indicators/PinkButterfly/Core/

6. src/Core/CoreEngine.cs
   → Añadidas ~350 líneas (persistencia, purga, stats, diagnostics)
   → Reemplazar en: [TuProyecto]/Indicators/PinkButterfly/Core/


=============================================================================
CÓMO PROBAR
=============================================================================

1. COMPILAR EN NINJATRADER:
   - Abre NinjaTrader
   - Tools → Edit NinjaScript → Indicator
   - Compila el proyecto
   - Verifica que NO HAY ERRORES

2. EJECUTAR TESTS EXISTENTES (225 tests):
   - Abre un gráfico
   - Añade el indicador "TestRunnerIndicator"
   - Verifica que los 225 tests existentes SIGUEN PASANDO
   - Si alguno falla, DETENTE y avísame

3. EJECUTAR TESTS NUEVOS (20 tests de Fase 9):
   - En TestRunnerIndicator, ejecuta Fase9Tests
   - Verifica que los 20 tests nuevos PASAN
   - Si alguno falla, DETENTE y avísame

4. PROBAR PERSISTENCIA MANUALMENTE:
   - Crea un CoreEngine
   - Añade algunas estructuras (FVG, Swings, etc.)
   - Llama a: engine.SaveStateToJSONAsync().Wait();
   - Verifica que se creó el archivo en:
     Documents/NinjaTrader 8/PinkButterfly/brain_state.json
   - Crea un nuevo engine y llama a: engine.LoadStateFromJSON();
   - Verifica que cargó las estructuras correctamente

5. PROBAR DIAGNÓSTICOS:
   - Llama a: var report = engine.RunSelfDiagnostics();
   - Verifica que todos los tests del reporte pasan
   - Imprime: report.GetSummary() o revisa report.Tests

6. PROBAR ESTADÍSTICAS:
   - Llama a: var stats = engine.GetEngineStats();
   - Verifica que stats.TotalStructures es correcto
   - Verifica que stats.TotalPurgedSinceStart funciona
   - Imprime: stats.GetSummary()


=============================================================================
QUÉ BUSCAR (POSIBLES PROBLEMAS)
=============================================================================

✓ Errores de compilación (namespace, referencias, etc.)
✓ Tests que fallan (los 225 existentes + 20 nuevos)
✓ Excepciones al guardar/cargar estado
✓ Problemas con rutas de archivos
✓ Problemas con serialización JSON
✓ Purga que elimina estructuras incorrectamente
✓ Diagnósticos que fallan


=============================================================================
SI TODO FUNCIONA
=============================================================================

Avísame y entonces SÍ procederemos con:
1. git add .
2. git commit -m "Fase 9: Persistencia y Optimización (245 tests, 100%)"
3. git push origin feature/fase-9-persistencia-optimizacion


=============================================================================
SI ALGO FALLA
=============================================================================

DETENTE y avísame con:
- Qué test falló
- Qué error de compilación hay
- Qué excepción se lanzó
- Logs completos

NO HAGAS COMMIT SI HAY ERRORES


=============================================================================
RESUMEN DE LO QUE HACE FASE 9
=============================================================================

✅ Persistencia JSON:
   - Guarda/carga estado completo del motor
   - Validación de hash SHA256 de configuración
   - Guardado asíncrono con debounce (cada 30 segundos)
   - Backup automático antes de sobrescribir

✅ Purga Inteligente:
   - Por score bajo (< 0.1)
   - Por edad (> 500 barras inactivas)
   - Por límite de tipo (FVG: 100, OB: 80, etc.)
   - Por límite global (500 estructuras/TF)
   - Agresiva para Liquidity Grabs (> 20 barras)

✅ Estadísticas Completas:
   - Total estructuras, activas, completadas
   - Estructuras por tipo y timeframe
   - Scores (promedio, min, max)
   - Detecciones por detector
   - Purgas (total, por tipo)
   - Persistencia (saves/loads, success/errors)
   - Performance (tiempo, memoria)
   - Bias (actual, cambios)

✅ Diagnósticos Sintéticos:
   - 6 tests automáticos (init, stats, persistence, purge, thread-safety, performance)
   - Reporte JSON con pass/fail
   - Tiempos de ejecución

✅ 20 Tests Nuevos:
   - 8 tests de persistencia
   - 6 tests de purga
   - 3 tests de debounce
   - 3 tests de diagnósticos


=============================================================================
FIN DE INSTRUCCIONES
=============================================================================



